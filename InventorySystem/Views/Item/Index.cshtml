<link href="~/css/item.css" rel="stylesheet" />

@{
    Layout = "_Layout";
}

  <!-- Main Content -->
<div class="main-wrapper">
    <div class="page-header">
        <div class="page-title">
            <h2>Item Management</h2>
            <p>Manage all inventory items</p>
        </div>
        <button class="btn btn-success" onclick="showModal('itemModal')">
            ➕ Add New Item
        </button>
    </div>

    <!-- Filters -->
    <div class="filter-section">
        <div class="filter-grid">
            <input type="text" class="form-control" placeholder="🔍 Search items..." id="searchInput" onkeyup="searchTable()">
            <select class="form-control" id="listCategoryDropdown" onchange="renderFilteredTable()">
                <option>All Categories</option>
            </select>

            <select class="form-control" onchange="renderFilteredTable()">
                <option>All Status</option>
                <option>Active</option>
                <option>Inactive</option>
            </select>
        </div>
    </div>

    <!-- Data Table -->
    <div class="card">
        <div class="table-container">
            <table class="data-table" id="itemTable">
                <thead>
                    <tr>
                        <th style="width: 80px;">Item ID</th>
                        <th style="width: 80px;">Image</th>
                        <th>Item Name</th>
                        <th>Category</th>
                        <th>Barcode</th>
                        <th style="width: 120px;">Sale Price</th>
                        <th style="width: 100px;">Status</th>
                        <th style="width: 200px;">Actions</th>
                    </tr>
                </thead>
                <tbody id="itemTableBody"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Add/Edit Item Modal -->
<div class="modal" id="itemModal">
    <div class="modal-dialog">
        <div class="modal-header">
            <h3 class="modal-title" id="modalTitle">Add New Item</h3>
            <button class="modal-close" onclick="closeModal('itemModal')">&times;</button>
        </div>
        <form id="itemForm" onsubmit="saveItem(event)">
            <div class="modal-body">
                <div class="modal-grid">
                    <!-- Left Side - Item Details -->
                    <div class="form-section">
                        <input type="hidden" id="itemId">

                        <div class="form-group">
                            <label class="form-label">Item ID</label>
                            <input type="text" class="form-control" id="itemIdDisplay" value="Auto-generated" readonly>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label required">Category</label>
                                <select class="form-control" id="categoryId" required>
                                    <option value="">Select Category</option>
                                    <option value="1">Electronics</option>
                                    <option value="2">Accessories</option>
                                    <option value="3">Clothing</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Size</label>
                                <select class="form-control" id="size">
                                    <option>Select Size</option>
                                    <option>Small</option>
                                    <option>Medium</option>
                                    <option>Large</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label required">Item Name</label>
                            <input type="text" class="form-control" id="itemName" placeholder="Enter item name" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label required">Sale Price</label>
                            <input type="number" class="form-control" id="salePrice" value="0" step="0.01" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="itemDescription" placeholder="Enter item description"></textarea>
                        </div>

                        <div class="checkbox-group">
      @*                       <label class="checkbox-label">
                                <input type="checkbox" id="isMarinated">
                                <span>Is Marinated Item</span>
                            </label> *@
                            <label class="checkbox-label">
                                <input type="checkbox" id="isActive" checked>
                                <span>Is Active</span>
                            </label>
                        </div>
                    </div>

                    <!-- Right Side - Image & Barcode -->
                    <div class="image-section">
                        <!-- Image Upload -->
                        <div class="form-group">
                            <label class="form-label">Item Image</label>
                            <div class="image-upload-box">
                                <img src="https://via.placeholder.com/200" id="imagePreview" class="image-preview" alt="Preview">
                                <input type="file" id="fileInput" accept="image/*" style="display: none;">
                                <button type="button" class="upload-btn" onclick="document.getElementById('fileInput').click()">
                                    📁 Browse Image
                                </button>
                                <p style="margin-top: 0.5rem; color: var(--text-secondary); font-size: 0.85rem;">
                                    JPG, PNG (Max 2MB)
                                </p>
                            </div>
                        </div>

                        <!-- Barcode Management -->
                       @*  <div class="form-group">
                            <label class="form-label">Barcode</label>
                            <input type="text" class="form-control" id="barcodeInput" placeholder="Scan or enter barcode">
                            <button type="button" class="btn btn-success" onclick="addBarcode()" style="width: 100%; margin-top: 0.5rem;">
                                ➕ Add Barcode
                            </button>
                        </div>

                        <div class="barcode-section">
                            <div class="barcode-header">
                                <strong style="font-size: 0.9rem;">Barcode List</strong>
                            </div>
                            <div class="barcode-list" id="barcodeList">
                                <div class="barcode-item selected">
                                    <span style="font-weight: 500;">000001</span>
                                    <button type="button" class="barcode-remove" onclick="this.parentElement.remove()">×</button>
                                </div>
                            </div>
                        </div> *@
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" onclick="closeModal('itemModal')">✖ Cancel</button>
                <button type="submit" class="btn btn-success">💾 Save Item</button>
            </div>
        </form>
    </div>
</div>

<script>
    let isEditMode = false;

        document.addEventListener('DOMContentLoaded', function() {
        loadItemList();
            loadCategories(null, "listCategoryDropdown");
    });

            async function loadItemListtest() {
        try {
            const response = await fetch('/Item/GetList');
            const items = await response.json();

            const tableBody = document.getElementById('itemTableBody');
            tableBody.innerHTML = ''; // clear old rows

            if (!items || items.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="8" style="text-align:center;">No items found.</td></tr>';
                return;
            }

            items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.itemID}</td>
                        <td><img src="${item.imagePath || 'https://via.placeholder.com/50'}" class="item-image-thumb" alt="Item"></td>
                    <td>${item.itemName}</td>
                    <td>${item.categoryName || ''}</td>
                    <td>0000${item.itemID}</td>
                    <td>${item.salePrice?.toFixed(2) ?? '0.00'}</td>
                    <td>
                        <span class="badge ${item.isActive ? 'badge-success' : 'badge-danger'}">
                            ${item.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-primary btn-sm" onclick="editItem(${item.itemID})">✏️ Edit</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteItem(${item.itemID})">🗑️ Delete</button>
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        } catch (err) {
            console.error('Error loading items:', err);
        }
    }

    async function loadItemList() {
    try {
        const response = await fetch('/Item/GetList');
        const items = await response.json();

        allItems = items; // ✅ store globally
        renderFilteredTable(); // render based on filters
    } catch (err) {
        console.error('Error loading items:', err);
    }
}


        function renderFilteredTable() {
        const search = document.getElementById('searchInput').value.toLowerCase();
        const category = document.getElementById('listCategoryDropdown').value;
        const status = document.querySelector('.filter-grid select:nth-of-type(2)').value;

        const tableBody = document.getElementById('itemTableBody');
        tableBody.innerHTML = '';

        // Filter items
        const filtered = allItems.filter(item => {
            const matchesSearch =
                item.itemName?.toLowerCase().includes(search) ||
                item.categoryName?.toLowerCase().includes(search);

            const matchesCategory =
                !category || category === 'All Categories' || item.categoryId == category;

            const matchesStatus =
                status === 'All Status' ||
                (status === 'Active' && item.isActive) ||
                (status === 'Inactive' && !item.isActive);

            return matchesSearch && matchesCategory && matchesStatus;
        });

        if (filtered.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="8" style="text-align:center;">No items found.</td></tr>';
            return;
        }

        filtered.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.itemID}</td>
                <td><img src="${item.imagePath || 'https://via.placeholder.com/50'}" class="item-image-thumb" alt="Item"></td>
                <td>${item.itemName}</td>
                <td>${item.categoryName || ''}</td>
                <td>0000${item.itemID}</td>
                <td>${item.salePrice?.toFixed(2) ?? '0.00'}</td>
                <td>
                    <span class="badge ${item.isActive ? 'badge-success' : 'badge-danger'}">
                        ${item.isActive ? 'Active' : 'Inactive'}
                    </span>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-primary btn-sm" onclick="editItem(${item.itemID})">✏️ Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteItem(${item.itemID})">🗑️ Delete</button>
                    </div>
                </td>
            `;
            tableBody.appendChild(row);
        });
    }

function saveItem(event) {
        event.preventDefault();

        const formData = new FormData();
        formData.append("ItemId", $("#itemId").val());
        formData.append("ItemName", $("#itemName").val());
        formData.append("CategoryId", $("#categoryId").val());
        formData.append("SalePrice", $("#salePrice").val());
        formData.append("Description", $("#itemDescription").val());
        formData.append("Size", $("#size").val());
        formData.append("IsActive", $("#isActive").is(":checked"));

        const file = $("#fileInput")[0].files[0];
        if (file) {
            formData.append("File", file);
        }

        $.ajax({
            url: '/Item/Save',
            type: 'POST',
            data: formData,
            contentType: false,  // don't override
            processData: false,  // don't stringify
            success: function (res) {
                    closeModal('itemModal');
                    loadItemList();
            },
            error: function (xhr) {
                console.error("❌ Error saving item:", xhr);
                alert("Error: " + xhr.statusText);
            }
        });
    }

    // Delete Item
    async function deleteItem(id) {
        if (!confirm('Are you sure you want to delete this item?')) return;

        try {
            const response = await fetch('/Item/Delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id })
            });

            const result = await response.json();
            alert(result.message);
            if (result.success) await loadItemList();
        } catch (err) {
            console.error('Error deleting item:', err);
            alert('Error deleting item.');
        }
    }

        async function loadCategories(categoryId, dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        dropdown.innerHTML = '<option value="">Loading...</option>';

        try {
            const response = await fetch('/Category/GetCategoriesDropdown');
            const data = await response.json();

            dropdown.innerHTML = '<option value="">Select Category</option>';

            data.forEach(cat => {
                const option = document.createElement("option");
                option.value = cat.categoryId;
                option.textContent = cat.categoryName;
                dropdown.appendChild(option);
            });

            if (categoryId) {
                // ✅ Use the dropdownId dynamically, not hardcoded 'categoryId'
                $(`#${dropdownId}`).val(categoryId).trigger('change');
            }
        } catch (error) {
            console.error("Error loading categories:", error);
            dropdown.innerHTML = '<option value="">Error loading categories</option>';
        }
    }



 
        function showModal(id) {
            const modal = document.getElementById(id);
            if (modal) {
                             loadCategories(null, "categoryId");
                     document.getElementById('itemForm').reset();
                modal.style.display = 'flex';
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
            }
        }

        function openModal(id) {
            const modal = document.getElementById(id);
            if (modal) {
                modal.style.display = 'flex';
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
            }
        }

        // 🔹 Opens modal and populates data from controller
    async function editItem(itemId) {
        try {
                document.getElementById('itemForm').reset();
            // Fetch item from controller
            const response = await fetch(`/Item/GetItemById?id=${itemId}`);
            if (!response.ok) throw new Error('Failed to fetch item data');
            const item = await response.json();
                 openModal('itemModal');
                        loadCategories(item.categoryID, "categoryId");
         
            // --- Populate modal fields ---
            document.getElementById('modalTitle').innerText = 'Edit Item';
            document.getElementById('itemId').value = item.itemID;
            document.getElementById('itemIdDisplay').value = item.itemID;
            //document.getElementById('categoryId').value = item.categoryID;
            document.getElementById('size').value = item.size || 'Select Size';
            document.getElementById('itemName').value = item.itemName;
            document.getElementById('salePrice').value = item.salePrice;
            document.getElementById('itemDescription').value = item.description || '';
            document.getElementById('isActive').checked = item.isActive;

            // --- Image Preview ---
            const imagePreview = document.getElementById('imagePreview');
            if (item.imagePath)
                imagePreview.src = `${item.imagePath}`;
            else
                imagePreview.src = 'https://placehold.co/200x200';

            // --- Populate Barcode List ---
            // const barcodeList = document.getElementById('barcodeList');
            // barcodeList.innerHTML = ''; // clear previous barcodes
            // if (item.barcodes && item.barcodes.length > 0) {
            //     item.barcodes.forEach(code => {
            //         const div = document.createElement('div');
            //         div.className = 'barcode-item';
            //         div.innerHTML = `
            //             <span style="font-weight: 500;">${code}</span>
            //             <button type="button" class="barcode-remove" onclick="this.parentElement.remove()">×</button>
            //         `;
            //         barcodeList.appendChild(div);
            //     });
            // }

            // --- Finally, open the modal ---
               

        } catch (error) {
            console.error(error);
            alert('Unable to load item data.');
        }
    }

    function addItemToTable(itemData) {
        const tableBody = document.getElementById('itemTableBody');
        const newId = tableBody.rows.length + 1;

        const newRow = `
            <tr>
                <td>${newId}</td>
                <td><img src="https://via.placeholder.com/50" class="item-image-thumb" alt="Item"></td>
                <td>${itemData.itemName}</td>
                <td>Electronics</td>
                <td>00000${newId}</td>
                <td>$${parseFloat(itemData.salePrice).toFixed(2)}</td>
                <td><span class="badge badge-success">Active</span></td>
                <td>
                    <div class="action-buttons">
                        <button class="btn btn-primary btn-sm" onclick="editItem(${newId})">✏️ Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteItem(${newId})">🗑️ Delete</button>
                    </div>
                </td>
            </tr>
        `;

        tableBody.insertAdjacentHTML('beforeend', newRow);
    }

    // function addBarcode() {
    //     const barcodeInput = document.getElementById('barcodeInput');
    //     const barcode = barcodeInput.value.trim();

    //     if (!barcode) {
    //         alert('Please enter a barcode');
    //         return;
    //     }

    //     const barcodeList = document.getElementById('barcodeList');
    //     const newItem = document.createElement('div');
    //     newItem.className = 'barcode-item';
    //     newItem.innerHTML = `
    //         <span style="font-weight: 500;">${barcode}</span>
    //         <button type="button" class="barcode-remove" onclick="this.parentElement.remove()">×</button>
    //     `;

    //     barcodeList.appendChild(newItem);
    //     barcodeInput.value = '';
    //     barcodeInput.focus();
    // }

    // Image preview
    document.getElementById('fileInput').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
        }
    });

    // Search table
    function searchTable() {
        const input = document.getElementById('searchInput');
        const filter = input.value.toUpperCase();
        const table = document.getElementById('itemTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) {
            const cells = rows[i].getElementsByTagName('td');
            let found = false;

            for (let j = 0; j < cells.length; j++) {
                const cell = cells[j];
                if (cell) {
                    const textValue = cell.textContent || cell.innerText;
                    if (textValue.toUpperCase().indexOf(filter) > -1) {
                        found = true;
                        break;
                    }
                }
            }

            rows[i].style.display = found ? '' : 'none';
        }
    }

    // Allow Enter key to add barcode
    // document.getElementById('barcodeInput').addEventListener('keypress', function(e) {
    //     if (e.key === 'Enter') {
    //         e.preventDefault();
    //         addBarcode();
    //     }
    // });

    // Close modal on outside click
    document.getElementById('itemModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal('itemModal');
        }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal('itemModal');
        }
    });
</script>